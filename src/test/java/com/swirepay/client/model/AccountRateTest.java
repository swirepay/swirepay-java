/*
 * Swirepay API
 * Swirepay REST APIs' are resource-oriented URLs that accept JSON-encoded request bodies, return JSON-encoded responses, and use standard HTTP response codes, authentication, and verbs. You can use the Swirepay API in test mode, which does not affect your live data or interact with the banking networks. The `API key` you use to authenticate the request determines whether the request is live mode or test mode.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: apiteam@swirepay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.swirepay.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.swirepay.client.model.Acquirer;
import com.swirepay.client.model.Rate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for AccountRate
 */
public class AccountRateTest {
    private final AccountRate model = new AccountRate();

    /**
     * Model tests for AccountRate
     */
    @Test
    public void testAccountRate() {
        // TODO: test AccountRate
    }

    /**
     * Test the property 'gid'
     */
    @Test
    public void gidTest() {
        // TODO: test gid
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'deleted'
     */
    @Test
    public void deletedTest() {
        // TODO: test deleted
    }

    /**
     * Test the property 'accountRate'
     */
    @Test
    public void accountRateTest() {
        // TODO: test accountRate
    }

    /**
     * Test the property 'processingMin'
     */
    @Test
    public void processingMinTest() {
        // TODO: test processingMin
    }

    /**
     * Test the property 'processingMax'
     */
    @Test
    public void processingMaxTest() {
        // TODO: test processingMax
    }

    /**
     * Test the property 'accountFee'
     */
    @Test
    public void accountFeeTest() {
        // TODO: test accountFee
    }

    /**
     * Test the property 'salesPerson'
     */
    @Test
    public void salesPersonTest() {
        // TODO: test salesPerson
    }

    /**
     * Test the property 'accountTax'
     */
    @Test
    public void accountTaxTest() {
        // TODO: test accountTax
    }

    /**
     * Test the property 'rate'
     */
    @Test
    public void rateTest() {
        // TODO: test rate
    }

    /**
     * Test the property 'acquirer'
     */
    @Test
    public void acquirerTest() {
        // TODO: test acquirer
    }

}
