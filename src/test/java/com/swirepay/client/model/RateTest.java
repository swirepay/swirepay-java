/*
 * Swirepay API
 * Swirepay REST APIs' are resource-oriented URLs that accept JSON-encoded request bodies, return JSON-encoded responses, and use standard HTTP response codes, authentication, and verbs. You can use the Swirepay API in test mode, which does not affect your live data or interact with the banking networks. The `API key` you use to authenticate the request determines whether the request is live mode or test mode.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: apiteam@swirepay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.swirepay.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.swirepay.client.model.Acquirer;
import com.swirepay.client.model.Category;
import com.swirepay.client.model.Country;
import com.swirepay.client.model.Currency;
import com.swirepay.client.model.PaymentType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for Rate
 */
public class RateTest {
    private final Rate model = new Rate();

    /**
     * Model tests for Rate
     */
    @Test
    public void testRate() {
        // TODO: test Rate
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'gid'
     */
    @Test
    public void gidTest() {
        // TODO: test gid
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'processingMin'
     */
    @Test
    public void processingMinTest() {
        // TODO: test processingMin
    }

    /**
     * Test the property 'processingMax'
     */
    @Test
    public void processingMaxTest() {
        // TODO: test processingMax
    }

    /**
     * Test the property 'baseRate'
     */
    @Test
    public void baseRateTest() {
        // TODO: test baseRate
    }

    /**
     * Test the property 'baseFee'
     */
    @Test
    public void baseFeeTest() {
        // TODO: test baseFee
    }

    /**
     * Test the property 'rate'
     */
    @Test
    public void rateTest() {
        // TODO: test rate
    }

    /**
     * Test the property 'fee'
     */
    @Test
    public void feeTest() {
        // TODO: test fee
    }

    /**
     * Test the property 'baseTax'
     */
    @Test
    public void baseTaxTest() {
        // TODO: test baseTax
    }

    /**
     * Test the property 'tax'
     */
    @Test
    public void taxTest() {
        // TODO: test tax
    }

    /**
     * Test the property 'deleted'
     */
    @Test
    public void deletedTest() {
        // TODO: test deleted
    }

    /**
     * Test the property 'country'
     */
    @Test
    public void countryTest() {
        // TODO: test country
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'acquirer'
     */
    @Test
    public void acquirerTest() {
        // TODO: test acquirer
    }

    /**
     * Test the property 'paymentType'
     */
    @Test
    public void paymentTypeTest() {
        // TODO: test paymentType
    }

}
